#pragma once

//#define r5_c15
#define red

#define c(X,Y)  case X : return Y ; break;

#ifdef r5_c15

char getKey(int r, int c){
  int id = r*100 + c;
  switch (id) {
    c(0 , '`' )
    c(1 , '1' )
    c(2 , '2' )
    c(3 , '3' )
    c(4 , '4' )
    c(5 , '5' )
    c(6 , '6' )
    c(7 , '7' )
    c(8 , '8' )
    c(9 , '9' )
    c(10 , '0' )
    c(11 , '-' )
    c(12 , '=' )
    c(13 , '\b' )

    c(100 , '\t')
    c(101 , 'q' )
    c(102 , 'w' )
    c(103 , 'e' )
    c(104 , 'r' )
    c(105 , 't' )
    c(106 , 'y' )
    c(107 , 'u' )
    c(108 , 'i' )
    c(109 , 'o' )
    c(110 , 'p' )
    c(111 , '[' )
    c(112 , ']' )
    c(113 , '\\' )
    
    
    c(201 , 'a' )
    c(202 , 's' )
    c(203 , 'd' )
    c(204 , 'f' )
    c(205 , 'a' )
    c(206 , 'h' )
    c(207 , 'j' )
    c(208 , 'k' )
    c(209 , 'l' )
    c(210 , ';' )
    c(211 , '\'' )
    c(212 , '\n' )

    
    c(301 , 'z' )
    c(302 , 'x' )
    c(303 , 'c' )
    c(304 , 'v' )
    c(305 , 'b' )
    c(306 , 'n' )
    c(307 , 'm' )
    c(308 , ',' )
    c(309 , '.' )
    c(310 , '/' )

    c(401 , ' ')
    c(402 , ' ')
    c(403 , ' ')
    c(404 , ' ')
    c(405 , ' ')
    c(406 , ' ')
    c(407 , ' ')
    c(408 , ' ')
    c(409 , ' ')
    c(410 , ' ')
    c(411 , ' ')
    default: return 0 ; break;
}
}


#endif


#ifdef red

char getKey(int r, int c){
  int id = r*100 + c;
  switch (id) {
    c(0 , '1' )
    c(1 , '2' )
    c(2 , '3' )
    c(3 , '4' )
    c(4 , '5' )
    c(5 , '6' )
    c(6 , '7' )
    c(7 , '8' )
    c(8 , '9' )
    c(9 , '0' )

    c(100 , 'q' )
    c(101 , 'w' )
    c(102 , 'e' )
    c(103 , 'r' )
    c(104 , 't' )
    c(105 , 'y' )
    c(106 , 'u' )
    c(107 , 'i' )
    c(108 , 'o' )
    c(109 , 'p' )
    
    
    c(200 , 'a' )
    c(201 , 's' )
    c(202 , 'd' )
    c(203 , 'f' )
    c(204 , 'a' )
    c(205 , 'h' )
    c(206 , 'j' )
    c(207 , 'k' )
    c(208 , 'l' )
    c(209 , ';' )

    c(300 , 'z' )
    c(301 , 'x' )
    c(302 , 'c' )
    c(303 , 'v' )
    c(304 , 'b' )
    c(305 , 'n' )
    c(306 , 'm' )
    c(307 , '\n' )
    c(308 ,  2 )
    c(309 ,  3 )

    c(401 , ' ')
    c(402 , ' ')
    c(403 , ' ')
    c(404 , ' ')
    c(405 , ' ')
    c(406 , ' ')
    c(407 , ' ')
    c(408 , ' ')
    c(409 , ' ')
    default: return 0 ; break;
}
}


#endif

